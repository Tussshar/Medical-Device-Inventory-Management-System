/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Person.Person;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import java.util.ArrayList;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Tushar
 */
public class SignUpUserAccountJDialog extends javax.swing.JDialog {

    /**
     * Creates new form SignUpUserAccountJDialog
     */
    private JFrame mainJFrame;
    private EcoSystem ecoSystem;
    private Organization organization;
    private ArrayList<Person> personDirectory;
    private ArrayList<UserAccount> userAccountDirectory;
    private Person person;
    private UserAccount userAccount;
    private String emailAddress;
    private String firstName;
    private String userName;
    private String password;
    private String errorMessage;
    private int count = 0;
    private Role role;

    public SignUpUserAccountJDialog(JFrame mainJFrame, boolean modal, Organization organization, EcoSystem ecoSystem, ArrayList<Person> personDirectory, ArrayList<UserAccount> userAccountDirectory, String emailAddress, String firstName) {
        //super(parent, modal);
        initComponents();
        this.mainJFrame = mainJFrame;
        this.ecoSystem = ecoSystem;
        this.organization = organization;
        this.personDirectory = personDirectory;
        this.userAccountDirectory = userAccountDirectory;
        this.emailAddress = emailAddress;
        this.firstName = firstName;
        this.setLocationRelativeTo(null);

        populateOrganizationComboBox();
    }

    public static boolean sendMail(String from, String password, String message, String to) {
        String host = "smtp.gmail.com";
        Properties props = System.getProperties();
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", host);
        props.put("mail.smtp.user", from);
        props.put("mail.smtp.password", password);
        props.put("mail.smtp.port", 587);
        props.put("mail.smtp.auth", "true");

        Session session = Session.getDefaultInstance(props, null);
        MimeMessage mimeMessage = new MimeMessage(session);
        try {
            mimeMessage.setFrom(new InternetAddress(from));
//                InternetAddress[] toAddress = new InternetAddress(to.length);
//                toAddress = new InternetAddress();
            mimeMessage.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
            mimeMessage.setSubject("Welcome to Partner Health Care System");
            mimeMessage.setText(message);
            Transport transport = session.getTransport("smtp");
            transport.connect(host, from, password);
            transport.sendMessage(mimeMessage, mimeMessage.getRecipients(Message.RecipientType.TO));
//                transport.send(mimeMessage);
            transport.close();
            return true;
        } catch (MessagingException me) {
            me.printStackTrace();
        }

        return false;
    }

    private void populateOrganizationComboBox() {
        cmbOrganization.removeAllItems();
        cmbOrganization.addItem(organization);
    }

    private void populateRoleComboBox(Organization organization) {
        cmbRole.removeAllItems();

        for (Role role : organization.getSupportedRole()) {
            cmbRole.addItem(role);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPersonDetail = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        btnSignUp = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        cmbRole = new javax.swing.JComboBox();
        cmbOrganization = new javax.swing.JComboBox();
        lblOrganization = new javax.swing.JLabel();
        lblRole = new javax.swing.JLabel();
        passwordJTextField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblPersonDetail.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblPersonDetail.setForeground(new java.awt.Color(102, 153, 255));
        lblPersonDetail.setText("Please Enter Your Details");

        lblUserName.setText("UserName");

        lblPassword.setText("Password");

        btnSignUp.setBackground(new java.awt.Color(51, 204, 0));
        btnSignUp.setText("SignUP");
        btnSignUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignUpActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(255, 153, 0));
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        cmbRole.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbOrganization.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbOrganization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrganizationActionPerformed(evt);
            }
        });

        lblOrganization.setText("Organization");

        lblRole.setText("Role");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(lblPersonDetail))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGap(39, 39, 39)
                                .addComponent(btnSignUp)
                                .addGap(18, 18, 18)
                                .addComponent(btnCancel))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblPassword)
                                    .addComponent(lblUserName)
                                    .addComponent(lblOrganization)
                                    .addComponent(lblRole))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbOrganization, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbRole, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtUserName)
                                    .addComponent(passwordJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(180, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(lblPersonDetail)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbOrganization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOrganization))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRole))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserName)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(passwordJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSignUp)
                    .addComponent(btnCancel))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSignUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignUpActionPerformed

        for (Person person : personDirectory) {
            this.person = person;
        }
        errorMessage = "";
        userName = txtUserName.getText();
        password = passwordJTextField.getText().trim();
        count = 0;
        if (userName.isEmpty() || password.isEmpty()) {

            errorMessage += "You have left the below mentioned field as blank, Please fill them\n";
            if (userName.isEmpty()) {
                count++;
                errorMessage += count + ". UserName\n";
            }
            if (password.isEmpty()) {
                count++;
                errorMessage += count + ". Password\n";
            }
        }

        if (!userName.matches("[a-zA-Z0-9]+")) {
            count++;
            errorMessage += "UserName can contain only alphabets and numbers.\n";
        }

        if (!password.matches("[a-zA-Z0-9]+")) {
            count++;
            errorMessage += "Password can contain only alphabets and numbers.\n";
        }

        if (count == 0) {
            for (UserAccount userAccount : organization.getUserAccountDirectory().getUserAccountList()) {
                if (userAccount.getUserName().equalsIgnoreCase(userName)) {
                    count++;
                    errorMessage += "The Current UserName already exists, Please Enter a new One";
                }
            }
        }

        if (count == 0) {
            for (Enterprise enterprise : ecoSystem.getEnterpriseList()) {
                for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                    if (userAccount.getUserName().equalsIgnoreCase(userName)) {
                        count++;
                        errorMessage += "The Current UserName already exists, Please Enter a new One";
                        break;
                    }
                }
                if (count == 0) {
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for (UserAccount userAccount : organization.getUserAccountDirectory().getUserAccountList()) {
                            if (userAccount.getUserName().equalsIgnoreCase(userName)) {
                                count++;
                                errorMessage += "The Current UserName already exists, Please Enter a new One";
                                break;
                            }
                        }
                    }
                }
            }
            if (count == 0) {
                for (Network network : ecoSystem.getNetworkList()) {
                    for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                        for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                            if (userAccount.getUserName().equalsIgnoreCase(userName)) {
                                count++;
                                errorMessage += "The Current UserName already exists, Please Enter a new One";
                                break;
                            }
                        }
                        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            for (UserAccount userAccount : org.getUserAccountDirectory().getUserAccountList()) {
                                if (userAccount.getUserName().equalsIgnoreCase(userName)) {
                                    count++;
                                    errorMessage += "The Current UserName already exists, Please Enter a new One";
                                    break;
                                }
                            }
                        }
                    }
                }
                for (UserAccount userAccount : ecoSystem.getUserAccountDirectory().getUserAccountList()) {
                    if (userAccount.getUserName().equalsIgnoreCase(userName)) {
                        count++;
                        errorMessage += "The Current UserName already exists, Please Enter a new One";
                        break;
                    }
                }
                for (Enterprise enterprise : ecoSystem.getEnterpriseList()) {
                    for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                        if (userAccount.getUserName().equalsIgnoreCase(userName)) {
                            count++;
                            errorMessage += "The Current UserName already exists, Please Enter a new One";
                            break;
                        }
                    }
                    for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for (UserAccount userAccount : org.getUserAccountDirectory().getUserAccountList()) {
                            if (userAccount.getUserName().equalsIgnoreCase(userName)) {
                                count++;
                                errorMessage += "The Current UserName already exists, Please Enter a new One";
                                break;
                            }
                        }
                    }
                }
            }
        }

        if (count == 0) {
            for (Network network : ecoSystem.getNetworkList()) {
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                        if (userAccount.getUserName().equalsIgnoreCase(userName)) {
                            count++;
                            errorMessage += "The Current UserName already exists, Please Enter a new One";
                            break;
                        }
                    }
                    if (count == 0) {
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            for (UserAccount userAccount : organization.getUserAccountDirectory().getUserAccountList()) {
                                if (userAccount.getUserName().equalsIgnoreCase(userName)) {
                                    count++;
                                    errorMessage += "The Current UserName already exists, Please Enter a new One";
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        if (count == 0) {
            role = (Role) cmbRole.getSelectedItem();
            userAccount = ecoSystem.getUserAccountDirectory().createAndAddUserAccount(userName, password, person, role);
            userAccountDirectory.add(userAccount);
            if (SignUpUserAccountJDialog.sendMail("tusharkale52@gmail.com",
                    "tussh122",
                    "Hello " + firstName + ",\nYou have been added to partner HeathCareSystem.\nYour Login Details are:\nUserName: " + userName + "\nPassword: " + password + "\nRole :" + role,
                    emailAddress)) {
                JOptionPane.showMessageDialog(null, "Email has been sent to your Email Address");
            }
            dispose();
        } else {
            JOptionPane.showMessageDialog(null, errorMessage);
        }
    }//GEN-LAST:event_btnSignUpActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed

        for (Person person : personDirectory) {
            this.person = person;
        }
        personDirectory.remove(person);
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void cmbOrganizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrganizationActionPerformed
        Organization organization = (Organization) cmbOrganization.getSelectedItem();
        if (organization != null) {
            populateRoleComboBox(organization);
        }

    }//GEN-LAST:event_cmbOrganizationActionPerformed

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SignUpUserAccountJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SignUpUserAccountJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SignUpUserAccountJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SignUpUserAccountJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SignUpUserAccountJDialog dialog = new SignUpUserAccountJDialog(mainJFrame, true, organization, ecoSystem, personDirectory, userAccountDirectory, emailAddress, firstName);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSignUp;
    private javax.swing.JComboBox cmbOrganization;
    private javax.swing.JComboBox cmbRole;
    private javax.swing.JLabel lblOrganization;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPersonDetail;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JPasswordField passwordJTextField;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
}
